# Generated by Django 5.1.5 on 2025-03-04 08:15

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Full Name')),
                ('date_of_birth', models.DateField(blank=True, null=True, verbose_name='Date of Birth')),
                ('gender', models.CharField(blank=True, choices=[('Male', 'Male'), ('Female', 'Female'), ('Other', 'Other')], max_length=15, null=True, verbose_name='Gender')),
                ('marital_status', models.CharField(blank=True, choices=[('Single', 'Single'), ('Married', 'Married'), ('Divorced', 'Divorced'), ('Widowed', 'Widowed')], max_length=20, null=True, verbose_name='Marital Status')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, unique=True, verbose_name='Email')),
                ('mobile', models.CharField(blank=True, max_length=15, null=True, verbose_name='Mobile')),
                ('address', models.TextField(blank=True, null=True, verbose_name='Address')),
                ('national_id', models.CharField(blank=True, max_length=20, null=True, unique=True, verbose_name='National ID')),
                ('qualifications', models.TextField(blank=True, null=True, verbose_name='Qualifications')),
                ('years_of_experience', models.PositiveIntegerField(blank=True, null=True, verbose_name='Years of Experience')),
                ('specialization', models.CharField(blank=True, max_length=100, null=True, verbose_name='Specialization')),
                ('assigned_classes', models.TextField(blank=True, null=True, verbose_name='Assigned Classes')),
                ('subjects_taught', models.TextField(blank=True, null=True, verbose_name='Subjects Taught')),
                ('date_of_appointment', models.DateField(blank=True, null=True, verbose_name='Date of Appointment')),
                ('academic_rank', models.CharField(blank=True, max_length=50, null=True, verbose_name='Academic Rank')),
                ('last_professional_training_date', models.DateField(blank=True, null=True, verbose_name='Last Professional Training Date')),
                ('completed_training_courses', models.PositiveIntegerField(default=0, verbose_name='Completed Training Courses')),
                ('annual_performance_rating', models.CharField(blank=True, choices=[('Excellent', 'Excellent'), ('Very Good', 'Very Good'), ('Good', 'Good'), ('Needs Improvement', 'Needs Improvement')], max_length=20, null=True, verbose_name='Annual Performance Rating')),
                ('awards_and_certifications', models.TextField(blank=True, null=True, verbose_name='Awards and Certifications')),
                ('projects_supervised', models.PositiveIntegerField(default=0, verbose_name='Projects Supervised')),
                ('chronic_illnesses', models.TextField(blank=True, null=True, verbose_name='Chronic Illnesses')),
                ('general_health_status', models.CharField(blank=True, max_length=100, null=True, verbose_name='General Health Status')),
                ('emergency_contact_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Emergency Contact Name')),
                ('emergency_contact_relationship', models.CharField(blank=True, max_length=50, null=True, verbose_name='Emergency Contact Relationship')),
                ('emergency_contact_phone', models.CharField(blank=True, max_length=15, null=True, verbose_name='Emergency Contact Phone')),
                ('disability_type', models.CharField(blank=True, max_length=50, null=True, verbose_name='Type of Disability')),
                ('disability_details', models.TextField(blank=True, null=True, verbose_name='Disability Details')),
                ('assistive_devices', models.TextField(blank=True, null=True, verbose_name='Assistive Devices')),
                ('special_requirements', models.TextField(blank=True, null=True, verbose_name='Special Requirements')),
                ('care_instructions', models.TextField(blank=True, null=True, verbose_name='Care Instructions')),
                ('housing_status', models.CharField(blank=True, choices=[('Owned', 'Owned'), ('Rented', 'Rented'), ('Shared', 'Shared')], max_length=20, null=True, verbose_name='Housing Status')),
                ('languages_spoken', models.TextField(blank=True, null=True, verbose_name='Languages Spoken')),
                ('hobbies', models.TextField(blank=True, null=True, verbose_name='Hobbies')),
                ('transportation', models.CharField(blank=True, choices=[('Own Car', 'Own Car'), ('Public Transport', 'Public Transport'), ('Needs Assistance', 'Needs Assistance')], max_length=100, null=True, verbose_name='Transportation')),
                ('professional_development_log', models.TextField(blank=True, null=True, verbose_name='Professional Development Log')),
                ('personal_development_plan', models.TextField(blank=True, null=True, verbose_name='Personal Development Plan')),
                ('strengths', models.TextField(blank=True, null=True, verbose_name='Strengths')),
                ('weaknesses', models.TextField(blank=True, null=True, verbose_name='Weaknesses')),
                ('technological_proficiency', models.TextField(blank=True, null=True, verbose_name='Technological Proficiency')),
                ('profile_image', models.ImageField(blank=True, null=True, upload_to='teacher_profiles/', verbose_name='Profile Image')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Teacher',
                'verbose_name_plural': 'Teachers',
            },
        ),
    ]
